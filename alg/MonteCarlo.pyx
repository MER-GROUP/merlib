'''
Метод Монте-Карло - группа численных методов для изучения случайных процессов. 
Суть метода заключается в следующем: процесс описывается математической моделью 
с использованием генератора случайных величин, модель многократно обсчитывается, 
на основе полученных данных вычисляются вероятностные характеристики рассматриваемого 
процесса. Например, чтобы узнать методом Монте-Карло, какое в среднем будет расстояние 
между двумя случайными точками в круге, нужно взять координаты большого числа случайных 
пар точек в границах заданной окружности, для каждой пары вычислить расстояние, 
а потом для них посчитать среднее арифметическое.

Алгоритм нахождения площади фигуры вписанной в прямоугольник
    генерруем случайный числа x, y в диапозонах [x1, x2], [y1, y2]
    подставляем числа x, y в системы уравнений
    если системы уравнений True, то увеличиваем k(попадания в фигуру) на 1
    иначе переходим к следующей итерации цикла
    после окончания итераций считаем плащадь Монте-Карло по формуле
    S = (k/n) * So
        k - попадания в фигуру
        n - количество испытаний
        So - площадь прямоугольника где вписана фигура

Реализация алгоритма - Максим Романенко (Red Alert) - 2022г.
'''
# импорт модуля random
# uniform() - возвращает случайное число с плавающей точкой,
# но при этом она позволяет задавать диапазон для 
# отбора значений от а до б включительно
from random import uniform

cdef class MonteCarlo:
    '''
    ************************************************************
    * class MonteCarlo - поиск площади фигуры вписанной        *
    *                    в прямоугольник                       *
    *----------------------------------------------------------*
    * конструктор и методы:                                    *
    *----------------------------------------------------------*
    * MonteCarlo() -> None                                     *
    *       принимает параметры для нахождения площади         *
    *       возвращаемое значение - None                       *
    *   Параметры конструктора:                                *
    *    n - количество испытаний (int)                        *
    *    x1 - наименьшая координата x прямоугольника (float)   *
    *    x2 - наибольшая координата x прямоугольника (float)   *
    *    y1 - наименьшая координата y прямоугольника (float)   *
    *    y2 - наибольшая координата y прямоугольника (float)   *
    *    *s - n систем уравнений (str)                         *
    *    output - вывод площади в консоль (bool)               *
    *             default (по умолчанию) - False               *
    *----------------------------------------------------------*
    * get() -> float                                           *
    *           возвращает площадь фигуры вписанной            *
    *               в прямоугольник.                           *
    *           возвращаемое значение - float                  *
    ************************************************************
    '''
    # переменные
    # x, y - случайный числа в диапазоне [x1, x2], [y1, y2]
    # i - счетчик для итераций
    # arr - список для хранения систем уравнений
    # k_res, n_res, So_res - итоговые переменные с плавающей точкой
    #                        для подсчета площади Монте-Карло
    cdef double x1, x2, x, y1, y2, y, So, k_res, n_res, So_res
    cdef list s, arr
    cdef int n, output, k, i

    # конструктор
    def __cinit__(self, n, x1, x2, y1, y2, *s, output=False):
        # количество испытаний
        self.n = n
        # координаты прямоугольника где вписана фигура
        self.x1 = x1
        self.x2 = x2
        self.y1 = y1
        self.y2 = y2
        # система уравнений фигуры
        self.s = [*s]
        # флаг - вывод в консаль площади Монте-Карло из конструктора 
        self.output = output
        # площадь прямоугольника где вписана фигура
        self.So = (abs(self.x1) + abs(self.x2)) * (abs(self.y1) + abs(self.y2))
        # количество испытаний (попаданий) в фигуру
        self.k = int()
        # вывод в консоль
        if self.output:
            print(self.get())

    # Метод
    # возвращает площпдь Монте-Карло
    # Алгоритм
    # генерруем случайный числа x, y в диапозонах [x1, x2], [y1, y2]
    # подставляем числа x, y в системы уравнений
    # если системы уравнений True, то увеличиваем k(попадания в фигуру) на 1
    # иначе переходим к следующей итерации цикла
    # после окончания итераций считаем плащадь Монте-Карло по формуле
    # S = (k/n) * So
    #       k - попадания в фигуру
    #       n - количество испытаний
    #       So - площадь прямоугольника где вписана фигура
    cpdef get(self):
        '''
        ************************************************************
        * get() -> float                                           *
        *           возвращает площадь фигуры вписанной            *
        *               в прямоугольник.                           *
        *           возвращаемое значение - float                  *
        ************************************************************
        '''
        while True:
            try:
                for _ in range(self.n):
                    self.x = uniform(self.x1, self.x2)
                    self.y = uniform(self.y1, self.y2)
                    self.arr = list(self.s.copy())

                    for self.i in range(len(self.arr)):
                        self.arr[self.i] = self.arr[self.i].replace('x', str(self.x))
                        self.arr[self.i] = self.arr[self.i].replace('y', str(self.y))
                        self.arr[self.i] = eval(self.arr[self.i])

                    if all([self.i for self.i in self.arr]):
                        self.k += 1

                self.k_res, self.n_res, self.So_res = self.k, self.n, self.So

                return (self.k_res / self.n_res) * self.So_res
            except ZeroDivisionError:
                continue