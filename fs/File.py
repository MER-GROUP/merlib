'''
class File - класс для обработки файлов

Дополнительные модули для обработки файлов
    shutil
    os
    os.path
    sys

Реализация методов класса - Максим Романенко (Red Alert) - 2022г.
'''
# *****************************************************************************************
# модуль для легкого копирования файлов и папок
import shutil
# модуль для работы с вводом и выводом в консоль
import sys
# импортируем молуль os.path
# dirname - определяем текущую директорию
# join - объеденяем директорию + файл (правильный путь файла)
from os.path import dirname, join
# *****************************************************************************************
# класс для работы с файлом
class File:
    '''
    class File - класс для обработки файлов
    методы:
        file_name_init(self, folder: str, filename: str) -> str
        file_read(file: str) -> list[str] 
        file_read_utf8(file: str) -> list[str]  
        file_write(file: str, arr: list) -> None  
        file_write_dict(file: str, dictor: dict) -> None  
        file_list_console(arr: list) -> None   
        file_print_console_utf8(file: str) -> None 
    '''
    # ---------------------------------------------------------------------------
    # инициализация полного имени файла (директория + имя файла)
    def file_name_init(self, folder: str, filename: str) -> str:
        '''
        file_name_init(self, folder: str, filename: str) -> str  
                инициализация полного имени файла                  
                    (директория + имя файла)                       
                возвращаемое значение - str (строку)               
        параметры:                                               
                folder: str - создать директорию в текущей папке   
                filename: str - создать файл в директории folder   
        '''
        # определяем текущую директорию, гбе будет храниться файл
        CURRENT_DIR = dirname(__file__)
        # задаем имя папки (директории)
        FOLDER = folder
        # задаем имя файла для чтения/записи данных
        FILENAME = filename
        # объединяем текущую директорию и файл
        FILE_PATH = join(CURRENT_DIR, FOLDER + FILENAME)
        # определяем тип FILE_PATH
        # print('FILE_PATH :', type(FILE_PATH))
        # возвращаеи полное имя файла (директория + имя файла)
        return FILE_PATH
    # ---------------------------------------------------------------------------
    # чтение содержимого файла построчно
    def file_read(self, file: str) -> list[str]:
        '''
        file_read(file: str) -> list[str]                        
                читает информацию из файла построчно               
                возвращаемое значение - list[str] (список строк)   
        параметры:                                               
                file: str - имя файла которое неоходимо открыть    
                    и прочитать                            
        '''
        with open(file, 'r') as f:
            return f.readlines()
    # ---------------------------------------------------------------------------
    # чтение содержимого файла содержащий текст в utf-8 кодировке
    def file_read_utf8(self, file: str) -> list[str]:
        '''
        file_read_utf8(file: str) -> list[str]                   
                читает информацию из файла в utf-8 кодировке       
                возвращаемое значение - list[str] (список строк)   
        параметры:                                               
                file: str - имя файла которое неоходимо открыть    
                    и прочитать                            
        '''
        str_byte = None
        with open(file, 'r', encoding='utf-8') as f:
            # shutil.copyfileobj(f, str_byte.extend)
            str_byte = f.read().encode('utf-8')
        # print(repr(str(str_byte, 'utf-8')))
        return str(str_byte, 'utf-8').split('\n')
    # ---------------------------------------------------------------------------
    # запись содержимого списка (list) в файл
    def file_write(self, file: str, arr: list) -> None:
        '''
        file_write(file: str, arr: list) -> None                 
                запись содержимого списка (list) в файл            
                возвращаемое значение - None (None)                
        параметры:                                               
                file: str - имя файла которое неоходимо открыть    
                    для записи содержимого списка          
                arr: list - список для записи в файл               
        '''
        for i in range(len(arr)):
            arr[i] += '\n'
        with open(file, 'w') as f:
            f.writelines(arr)
    # ---------------------------------------------------------------------------
    # запись содержимого словаря (dict) в файл
    def file_write_dict(self, file: str, dictor: dict) -> None:
        '''
        file_write_dict(file: str, dictor: dict) -> None         
                запись содержимого словаря (dict) в файл           
                возвращаемое значение - None (None)                
        параметры:                                               
                file: str - имя файла которое неоходимо открыть    
                    для записи содержимого словаря         
                dictor: dict - словарь для записи в файл           
        '''
        with open(file, 'w') as f:
            for k,v in dictor.items():
                f.write(f'{k} {v}\n')
    # ---------------------------------------------------------------------------
    # вывод в консоль содержимого списка (list)
    def file_list_print_console(self, arr: list) -> None:
        '''
        file_list_console(arr: list) -> None                     
                вывод в консоль содержимого списка (list)          
                возвращаемое значение - None (None)                
        параметры:                                               
                arr: list - список для вывода в консоль         
        '''
        for line in arr:
            # print(line.strip())
            # print(repr(line))
            # print(line, end='')
            print(line)
    # ---------------------------------------------------------------------------
    # вывод в консоль содержимого файла содержащий текст в utf-8 кодировке 
    # (аналог type filename в cmd.exe)
    def file_print_console_utf8(self, file: str) -> None:
        '''
        file_print_console_utf8(file: str) -> None               
                вывод в консоль содержимого файла содержащий       
                    текст в utf-8 кодировке                        
                возвращаемое значение - None (None)                
        параметры:                                               
                file: str - имя файла которое неоходимо открыть,   
                    прочитать и вывести в консоль          
        '''
        with open(file, 'r', encoding='utf-8') as f:
            shutil.copyfileobj(f, sys.stdout)
    # ---------------------------------------------------------------------------
# *****************************************************************************************
# тест
# если не модуль, то выполнить
if __name__ == '__main__':
    # функция для тестов
    def main():
        # ---------------------------------------------------------------------------
        # определяем текущую директорию, гбе будет храниться файл
        CURRENT_DIR = dirname(__file__)
        # задаем имя папки (директории)
        FOLDER = './temp/'
        # задаем имя файла для чтения данных
        FILENAME_READ = 'test_read.txt'
        # объединяем текущую директорию и файл для чтения
        FILE_PATH_READ = join(CURRENT_DIR, FOLDER + FILENAME_READ)
        # задаем имя файла для вывода результатов
        FILENAME_WRITE = 'test_write.txt'
        # объединяем текущую директорию и файл для записи
        FILE_PATH_WRITE = join(CURRENT_DIR, FOLDER + FILENAME_WRITE)
        # создаем объект
        f = File()
        # ---------------------------------------------------------------------------
        # чтение файла построчно
        print('----------чтение файла построчно----------')
        arr = f.file_read(FILE_PATH_READ)
        # вывод в консоль
        print(*arr, sep='')
        # ---------------------------------------------------------------------------
        # чтение содержимого файла содержащий текст в utf-8 кодировке
        print('----------чтение содержимого файла содержащий текст в utf-8 кодировке----------')
        arr = f.file_read_utf8(FILE_PATH_READ)
        # вывод в консоль
        print(*arr, sep='\n')
        # ---------------------------------------------------------------------------
        # запись содержимого списка (list) в файл
        print('----------запись содержимого списка (list) в файл----------')
        f.file_write(FILE_PATH_WRITE, arr)
        print('запись содержимого произведена')
        # ---------------------------------------------------------------------------
        # запись содержимого словаря (dict) в файл
        print('----------запись содержимого словаря (dict) в файл----------')
        dictor = dict(zip((1, 2, 3, 4, 5),('a', 'b', 'c', 'd', 'e')))
        f.file_write_dict(FILE_PATH_WRITE, dictor)
        print('запись содержимого произведена')
        # ---------------------------------------------------------------------------
        # вывод в консоль содержимого списка (list)
        print('----------вывод в консоль содержимого списка (list)----------')
        arr = list(range(10, 21))
        f.file_list_print_console(arr)
        # ---------------------------------------------------------------------------
        # вывод в консоль содержимого файла содержащий текст в utf-8 кодировке 
        print('----------вывод в консоль содержимого файла содержащий текст в utf-8 кодировке----------')
        f.file_print_console_utf8(FILE_PATH_READ)
        # ---------------------------------------------------------------------------
        # вывод в консоль содержимого файла содержащий текст в utf-8 кодировке 
        print('----------инициализация полного имени файла (директория + имя файла)----------')
        file_name = f.file_name_init('/temp/', 'test_read.txt')
        print(file_name)
        print(type(file_name))
        # ---------------------------------------------------------------------------
    # выполнить тест
    main()
# *****************************************************************************************